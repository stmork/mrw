«REM»
«»
«»
«»	$Id: StateImplementation.xpt 944 2010-04-23 07:01:13Z smork $
«»	$Revision: 944 $
«»	$Date: 2010-04-23 09:01:13 +0200 (Fr, 23. Apr 2010) $
«»	$Author: smork $
«»
«»	Copyright (C) 2010 committers of this modelrailway project. All rights reserved.
«»
«»	This program and the accompanying materials are made available under the
«»	terms of the Eclipse Public License v1.0.
«»
«»	The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
«»
«»
«»
«ENDREM»

«IMPORT uml»

«EXTENSION de::itemis::mrw::mc::sm»

«DEFINE Main FOR StateMachine»
«FILE smImplFileName()»
«EXPAND Tools::Header(smImplFileName(), name)»
«EXPAND Tools::Comment»

#include <avr/io.h>

#include "«smIncludeFileName()»"
#include "«smIncludeCommandFileName()»"
#include "«smIncludeActivityFileName()»"
#include "result_queue.h"
#include "tool.h"

/************************************************/
/* Vorwärtsdeklaration der choices Pseudostates */
/************************************************/
«FOREACH getChoices() AS choice»
«IF named(choice)»
static int8_t «method(choice.name)»(CAN_message *msg);
«ENDIF»
«ENDFOREACH»

/**********************/
/* Der aktuelle State */
/**********************/

static int8_t state = «initialDefinition()»;

int8_t «smGetState()»()
{
				return state;
}

/****************************************************/
/* Initialisierung und Verlassen des Initial States */
/****************************************************/
«FOREACH getInitials() AS initial»
void «smInit()»(void)
{
				int8_t result;

				state = «initialDefinition()»;
				CAN_message *msg = null;
«EXPAND Transition FOREACH initial.outgoing»
}
«ENDFOREACH»

/************************/
/* Die Auswerteschleife */
/************************/
void «method(name)»(CAN_message *msg)
{
	int8_t   cmd     = msg->data[0];
	uint16_t unit_no = bit_is_set(msg->status, RX_STAT_FRAME_EXTENDED) ? msg->eid : 0;
	int8_t   result;

	result = «smCheckCommand()»(msg);
	if (result >= 0)
	{
		switch (state)
		{
«FOREACH getStates() AS state»
«EXPAND Tools::Comment FOR state»
		case «stateDefinition(state)»:
			switch(cmd)
			{
«FOREACH state.outgoing.select(e|named(e)) AS transition»
			case «transition.name»:
«EXPAND Transition FOR transition»
				break;
«ENDFOREACH»
			default:
				result = «defaultTransition(state)»(msg);
				break;
			}
			break;
«ENDFOREACH»
		}
	}
	if (result >= 0)
	{
		queue_result(cmd, unit_no, result);
	}
}

/****************/
/* Pseudostates */
/****************/
«FOREACH getChoices() AS choice»
«IF named(choice)»
static int8_t «method(choice.name)»(CAN_message *msg)
{
	int8_t result = -1;
«EXPAND Transition FOREACH choice.outgoing»
	return result;
}
«ENDIF»
«ENDFOREACH»

«ENDFILE»
«ENDDEFINE»

«REM»
««« Template for a transition »»»
«ENDREM»

«DEFINE Transition FOR Transition»
«LET getGuard() AS body»
«IF body != null»
	if («body»(msg))
	{
«ENDIF»
«FOREACH allOwnedElements().typeSelect(Activity).select(e|named(e)) AS activity»
				result = «method(activity.name)»(msg);
«ENDFOREACH»
«EXPAND Target(this) FOR target»
«IF body != null»
	}
«ENDIF»
«ENDLET»
«ENDDEFINE»

«REM»
««« Target vertices »»»
«ENDREM»
«DEFINE Target(Transition t) FOR State»
«IF t.source != this»
				state = «stateDefinition(this)»;
«ENDIF»
«ENDDEFINE»

«DEFINE Target(Transition t) FOR Pseudostate»
				result = «method(name)»(msg);
«ENDDEFINE»

«DEFINE Target(Transition t) FOR Vertex»
				// «metaType.name» - «name»
«ENDDEFINE»
