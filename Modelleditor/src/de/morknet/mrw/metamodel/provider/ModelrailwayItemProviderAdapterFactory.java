/**
 * Copyright (C) 2010 committers of this modelrailway project. All rights reserved.
 *
 * $Id: ModelrailwayItemProviderAdapterFactory.java 937 2010-04-20 09:06:22Z smork $
 */
package de.morknet.mrw.metamodel.provider;

import de.morknet.mrw.metamodel.util.ModelrailwayAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelrailwayItemProviderAdapterFactory extends ModelrailwayAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ModelrailwayItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Anschluss} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnschlussItemProvider anschlussItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Anschluss}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnschlussAdapter() {
		if (anschlussItemProvider == null) {
			anschlussItemProvider = new AnschlussItemProvider(this);
		}

		return anschlussItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Gleisabschnitt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GleisabschnittItemProvider gleisabschnittItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Gleisabschnitt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGleisabschnittAdapter() {
		if (gleisabschnittItemProvider == null) {
			gleisabschnittItemProvider = new GleisabschnittItemProvider(this);
		}

		return gleisabschnittItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Modell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModellItemProvider modellItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Modell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModellAdapter() {
		if (modellItemProvider == null) {
			modellItemProvider = new ModellItemProvider(this);
		}

		return modellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Controller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControllerItemProvider controllerItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Controller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControllerAdapter() {
		if (controllerItemProvider == null) {
			controllerItemProvider = new ControllerItemProvider(this);
		}

		return controllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Gleismodul} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GleismodulItemProvider gleismodulItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Gleismodul}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGleismodulAdapter() {
		if (gleismodulItemProvider == null) {
			gleismodulItemProvider = new GleismodulItemProvider(this);
		}

		return gleismodulItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Ausfahrsignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AusfahrsignalItemProvider ausfahrsignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Ausfahrsignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAusfahrsignalAdapter() {
		if (ausfahrsignalItemProvider == null) {
			ausfahrsignalItemProvider = new AusfahrsignalItemProvider(this);
		}

		return ausfahrsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Bahnhof} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BahnhofItemProvider bahnhofItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Bahnhof}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBahnhofAdapter() {
		if (bahnhofItemProvider == null) {
			bahnhofItemProvider = new BahnhofItemProvider(this);
		}

		return bahnhofItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Impulsmodul} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImpulsmodulItemProvider impulsmodulItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Impulsmodul}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImpulsmodulAdapter() {
		if (impulsmodulItemProvider == null) {
			impulsmodulItemProvider = new ImpulsmodulItemProvider(this);
		}

		return impulsmodulItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Einfahrsignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EinfahrsignalItemProvider einfahrsignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Einfahrsignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEinfahrsignalAdapter() {
		if (einfahrsignalItemProvider == null) {
			einfahrsignalItemProvider = new EinfahrsignalItemProvider(this);
		}

		return einfahrsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Weiche} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeicheItemProvider weicheItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Weiche}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeicheAdapter() {
		if (weicheItemProvider == null) {
			weicheItemProvider = new WeicheItemProvider(this);
		}

		return weicheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Formvorsignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormvorsignalItemProvider formvorsignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Formvorsignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormvorsignalAdapter() {
		if (formvorsignalItemProvider == null) {
			formvorsignalItemProvider = new FormvorsignalItemProvider(this);
		}

		return formvorsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Gleis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GleisItemProvider gleisItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Gleis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGleisAdapter() {
		if (gleisItemProvider == null) {
			gleisItemProvider = new GleisItemProvider(this);
		}

		return gleisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Blocksignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlocksignalItemProvider blocksignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Blocksignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlocksignalAdapter() {
		if (blocksignalItemProvider == null) {
			blocksignalItemProvider = new BlocksignalItemProvider(this);
		}

		return blocksignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Vorsignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VorsignalItemProvider vorsignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Vorsignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVorsignalAdapter() {
		if (vorsignalItemProvider == null) {
			vorsignalItemProvider = new VorsignalItemProvider(this);
		}

		return vorsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.DKW} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DKWItemProvider dkwItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.DKW}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDKWAdapter() {
		if (dkwItemProvider == null) {
			dkwItemProvider = new DKWItemProvider(this);
		}

		return dkwItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Gleissperrsignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GleissperrsignalItemProvider gleissperrsignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Gleissperrsignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGleissperrsignalAdapter() {
		if (gleissperrsignalItemProvider == null) {
			gleissperrsignalItemProvider = new GleissperrsignalItemProvider(this);
		}

		return gleissperrsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Formhauptsignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormhauptsignalItemProvider formhauptsignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Formhauptsignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormhauptsignalAdapter() {
		if (formhauptsignalItemProvider == null) {
			formhauptsignalItemProvider = new FormhauptsignalItemProvider(this);
		}

		return formhauptsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Formgleissperrsignal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormgleissperrsignalItemProvider formgleissperrsignalItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Formgleissperrsignal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormgleissperrsignalAdapter() {
		if (formgleissperrsignalItemProvider == null) {
			formgleissperrsignalItemProvider = new FormgleissperrsignalItemProvider(this);
		}

		return formgleissperrsignalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.morknet.mrw.metamodel.Strecke} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StreckeItemProvider streckeItemProvider;

	/**
	 * This creates an adapter for a {@link de.morknet.mrw.metamodel.Strecke}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStreckeAdapter() {
		if (streckeItemProvider == null) {
			streckeItemProvider = new StreckeItemProvider(this);
		}

		return streckeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (anschlussItemProvider != null) anschlussItemProvider.dispose();
		if (gleisabschnittItemProvider != null) gleisabschnittItemProvider.dispose();
		if (modellItemProvider != null) modellItemProvider.dispose();
		if (controllerItemProvider != null) controllerItemProvider.dispose();
		if (gleismodulItemProvider != null) gleismodulItemProvider.dispose();
		if (ausfahrsignalItemProvider != null) ausfahrsignalItemProvider.dispose();
		if (bahnhofItemProvider != null) bahnhofItemProvider.dispose();
		if (impulsmodulItemProvider != null) impulsmodulItemProvider.dispose();
		if (einfahrsignalItemProvider != null) einfahrsignalItemProvider.dispose();
		if (weicheItemProvider != null) weicheItemProvider.dispose();
		if (formvorsignalItemProvider != null) formvorsignalItemProvider.dispose();
		if (gleisItemProvider != null) gleisItemProvider.dispose();
		if (blocksignalItemProvider != null) blocksignalItemProvider.dispose();
		if (vorsignalItemProvider != null) vorsignalItemProvider.dispose();
		if (dkwItemProvider != null) dkwItemProvider.dispose();
		if (gleissperrsignalItemProvider != null) gleissperrsignalItemProvider.dispose();
		if (formhauptsignalItemProvider != null) formhauptsignalItemProvider.dispose();
		if (formgleissperrsignalItemProvider != null) formgleissperrsignalItemProvider.dispose();
		if (streckeItemProvider != null) streckeItemProvider.dispose();
	}

}
